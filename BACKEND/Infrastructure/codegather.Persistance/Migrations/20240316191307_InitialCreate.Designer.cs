// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using codegather.Persistance;

#nullable disable

namespace codegather.Persistance.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240316191307_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.5");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("codegather.Domain.Competition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Competitions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedTime = new DateTime(2024, 3, 16, 22, 13, 7, 561, DateTimeKind.Local).AddTicks(8447),
                            Description = "Molestiae et qui in aut qui et fugit. Et doloribus illo quas consequatur atque saepe voluptatem accusamus. Occaecati ut est.",
                            EndTime = new DateTime(2024, 3, 23, 22, 13, 7, 561, DateTimeKind.Local).AddTicks(8693),
                            IsDeleted = false,
                            StartTime = new DateTime(2024, 3, 16, 22, 13, 7, 561, DateTimeKind.Local).AddTicks(8691),
                            Title = "Quod totam."
                        },
                        new
                        {
                            Id = 2,
                            CreatedTime = new DateTime(2024, 3, 16, 22, 13, 7, 561, DateTimeKind.Local).AddTicks(8701),
                            Description = "Autem qui culpa dolorem nulla autem impedit est. Laborum porro fugiat. Et sed qui autem a iusto voluptates. Asperiores placeat tempore ut ratione dolore. Accusamus est est necessitatibus et voluptate corrupti dolores. Magnam quibusdam animi rerum blanditiis temporibus illum repudiandae.",
                            EndTime = new DateTime(2024, 3, 23, 22, 13, 7, 561, DateTimeKind.Local).AddTicks(8920),
                            IsDeleted = false,
                            StartTime = new DateTime(2024, 3, 16, 22, 13, 7, 561, DateTimeKind.Local).AddTicks(8919),
                            Title = "Id modi."
                        });
                });

            modelBuilder.Entity("codegather.Domain.Metrics", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<float>("CompileTime")
                        .HasColumnType("REAL");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<float>("MemoryUsage")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("Metrics");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CompileTime = 0.5f,
                            CreatedTime = new DateTime(2024, 3, 16, 22, 13, 7, 564, DateTimeKind.Local).AddTicks(842),
                            IsDeleted = false,
                            MemoryUsage = 0.5f
                        },
                        new
                        {
                            Id = 2,
                            CompileTime = 0.5f,
                            CreatedTime = new DateTime(2024, 3, 16, 22, 13, 7, 564, DateTimeKind.Local).AddTicks(863),
                            IsDeleted = false,
                            MemoryUsage = 0.5f
                        },
                        new
                        {
                            Id = 3,
                            CompileTime = 0.5f,
                            CreatedTime = new DateTime(2024, 3, 16, 22, 13, 7, 564, DateTimeKind.Local).AddTicks(866),
                            IsDeleted = false,
                            MemoryUsage = 0.5f
                        },
                        new
                        {
                            Id = 4,
                            CompileTime = 0.5f,
                            CreatedTime = new DateTime(2024, 3, 16, 22, 13, 7, 564, DateTimeKind.Local).AddTicks(868),
                            IsDeleted = false,
                            MemoryUsage = 0.5f
                        });
                });

            modelBuilder.Entity("codegather.Domain.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CompetitionId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TestCases")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CompetitionId");

                    b.ToTable("Questions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CompetitionId = 1,
                            CreatedTime = new DateTime(2024, 3, 16, 22, 13, 7, 566, DateTimeKind.Local).AddTicks(3605),
                            Description = "Ut rem est aspernatur id aut consectetur illum sapiente atque. Incidunt sequi rerum atque soluta natus aut quaerat modi voluptatibus. Dolor aut minima quia porro. Laboriosam assumenda eum sequi. Autem non atque animi mollitia qui veritatis odit id.",
                            IsDeleted = false,
                            TestCases = "Test case 1, Test case 2, Test case 3"
                        },
                        new
                        {
                            Id = 2,
                            CompetitionId = 1,
                            CreatedTime = new DateTime(2024, 3, 16, 22, 13, 7, 566, DateTimeKind.Local).AddTicks(3924),
                            Description = "Occaecati ullam tempora natus eos facilis officiis. Nemo ab quia. Temporibus ut dolorem est et magni voluptatem ea. Perspiciatis aut qui ut. Nulla consequatur sit dicta facilis. Est est est sed sunt sit et nihil quas aut.",
                            IsDeleted = false,
                            TestCases = "Test case 1, Test case 2, Test case 3"
                        },
                        new
                        {
                            Id = 3,
                            CompetitionId = 2,
                            CreatedTime = new DateTime(2024, 3, 16, 22, 13, 7, 566, DateTimeKind.Local).AddTicks(4082),
                            Description = "Cum consectetur et eum id perferendis qui fugiat aspernatur. Officiis tenetur occaecati rem repellat perferendis. Ipsum sint molestias aut voluptas laborum. Veniam magni voluptas ipsa sit vitae.",
                            IsDeleted = false,
                            TestCases = "Test case 1, Test case 2, Test case 3"
                        },
                        new
                        {
                            Id = 4,
                            CompetitionId = 2,
                            CreatedTime = new DateTime(2024, 3, 16, 22, 13, 7, 566, DateTimeKind.Local).AddTicks(4219),
                            Description = "Corporis at iste sapiente pariatur sint enim maiores ab itaque. Quos magni laborum minima esse odit aperiam. Doloremque dolorum et et. Omnis itaque et ea corporis voluptates consectetur recusandae dolores. Temporibus sed veniam illo. Suscipit maiores fugit voluptas saepe placeat.",
                            IsDeleted = false,
                            TestCases = "Test case 1, Test case 2, Test case 3"
                        });
                });

            modelBuilder.Entity("codegather.Domain.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("codegather.Domain.Submission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MetricsId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("QuestionId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("SubmissionTime")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("MetricsId")
                        .IsUnique();

                    b.HasIndex("QuestionId");

                    b.HasIndex("UserId");

                    b.ToTable("Submissions");
                });

            modelBuilder.Entity("codegather.Domain.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("RefreshTokenExpiryTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("codegather.Domain.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("codegather.Domain.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("codegather.Domain.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("codegather.Domain.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("codegather.Domain.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("codegather.Domain.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("codegather.Domain.Question", b =>
                {
                    b.HasOne("codegather.Domain.Competition", "Competition")
                        .WithMany("Questions")
                        .HasForeignKey("CompetitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Competition");
                });

            modelBuilder.Entity("codegather.Domain.Submission", b =>
                {
                    b.HasOne("codegather.Domain.Metrics", "Metrics")
                        .WithOne()
                        .HasForeignKey("codegather.Domain.Submission", "MetricsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("codegather.Domain.Question", "Question")
                        .WithMany("Submissions")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("codegather.Domain.User", "User")
                        .WithMany("Submissions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Metrics");

                    b.Navigation("Question");

                    b.Navigation("User");
                });

            modelBuilder.Entity("codegather.Domain.Competition", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("codegather.Domain.Question", b =>
                {
                    b.Navigation("Submissions");
                });

            modelBuilder.Entity("codegather.Domain.User", b =>
                {
                    b.Navigation("Submissions");
                });
#pragma warning restore 612, 618
        }
    }
}
